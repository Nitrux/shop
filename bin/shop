#! /bin/bash


[ -d ~/.shop/.bin ] ||
    mkdir -p ~/.shop/.bin


op="$1"; shift
case "$op" in
    # Ensure the given packages are not present in the system.
    ( r )   for P; do rm -rf ~/.shop/"$P"; done;;


    # List installed packages.
    ( l )   shopt -s nullglob; cd ~/.shop; printf "%s\n" */*;;


    # Update the given package or all packages.
    ( u )   cd ~/.shop
            test $# = 0 && set */*
            for P; do
                (cd "$P" 2> /dev/null \
                    && git pull); done;;


    # Install a package.
    ( i )   # P might be specified in the following formats:
            #   <repo>
            #   <repo>:<tag>
            for P; do
                test -d "$P" && continue     # The package is already installed.

                IFS=: read r t <<< "$P"
                test "$t" && { git clone --depth 1 "https://github.com/$r" -b "$t" ~/.shop/"$P"; } \
                          || { git clone --depth 1 "https://github.com/$r" ~/.shop/"$P"; }

                test $? = 0 || exit 1

                find ~/.shop/"$P/bin" -type f -perm -u+x \
                    -exec ln -rfs {} ~/.shop/.bin/ \;
            done;;


    # Assemble a script from a list of packages.
    ( b )   # These lines come from bcf.
            def () { for K; do eval "$K () { $K+=( \"\$@\" ); __bcf_g=$K; }"; done; }
              , () { "$__bcf_g" "$@"; }

            # Concatenates a file directly or from a package.
            # $1 might be specified in the following formats:
            #   <file>
            #   <repo>:<file>
            cat_pf () {
                IFS=: read a b <<< "$1"
                test -f "$a" || { cat "$a"; return; }
                test -f ~/.shop/"$a/lib/$b" || i "$a"    # If the package is not installed, try to install it.
                cat ~/.shop/"$a/lib/$b"
            }

            def Main Target Include     # The groups in shopfile.
                source ./shopfile

            Target="${1:-${Target}}"    # Override Target if needed.

            read sb < "$Main"           # Use the shebang from Main.
                echo "$sb" > "$Target"  # We want to truncate this file (>) as it might not
                                        # be empty (as in a failed build, for instance).

            for P in "${Include[@]}" "$Main"
                do cat_pf "$P"; done >> "$Target"  # Append all passed files to $Target.

            chmod +x "$Target"
            echo "'$Target': Built.";;


    # On anything else show this help text.
    ( * )       _ () { echo -e "$*"; }
                _ "Usage: shop [CMD]"
                _ ""
                _ "CMD is any of:"
                _ ""
                _ "  i [pkgs]   Install the given packages."
                _ "             shop understands this format: \e[3;32m<user/repo>[/tag]\e[m."
                _ "             If \e[3;32m/tag\e[m is given, the package will be installed"
                _ "             as \e[3;32muser/repo-tag\e[m. Otherwise, as \e[3;32muser/repo\e[m."
                _ "  u [pkgs]   Update all or the given packages."
                _ "  r [pkgs]   Remove the given packages."
                _ "  l          List installed packages.";;
esac
